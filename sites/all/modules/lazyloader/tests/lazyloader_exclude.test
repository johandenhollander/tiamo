<?php

/**
 * Tests Lazyloader's exclusion functionality.
 */
class LazyloaderExcludeTestCase extends LazyloaderTestBase {

  public static function getInfo() {
    return array(
      'name' => 'Lazyloader exclude',
      'description' => 'Ensure lazyloader correctly excludes/includes images from lazyloading..',
      'group' => 'Lazyloader',
    );
  }

  /**
   * Tests functioning of the content type exclude settings.
   */
  function testContentTypeExclude() {
    // Test default rendering of a node.
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertLazyloaderEnabled();

    // Test rendering with content type exclusion enabled.
    $edit['lazyloader_content_types[article]'] = 'article';
    $this->drupalPost("admin/config/media/lazyloader/exclude", $edit, t('Save configuration'));
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertLazyloaderEnabled(FALSE, 'Lazyloader is disabled for page nodes when limited to article content types.');

    // Test rendering when the page type is supposed to be rendered.
    $edit['lazyloader_content_types[article]'] = FALSE;
    $edit['lazyloader_content_types[page]'] = 'page';
    $this->drupalPost("admin/config/media/lazyloader/exclude", $edit, t('Save configuration'));
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertLazyloaderEnabled(TRUE, 'Lazyloader is enabled for page nodes when limited to page content types.');
  }

  /**
   * Test functioning of the path exclude setting.
   */
  function testPathExclude() {
    $alias = $this->node->path['alias'];
    $this->drupalGet($alias);
    $this->assertLazyloaderEnabled();

    $edit['lazyloader_paths'] = $alias;
    $this->drupalPost("admin/config/media/lazyloader/exclude", $edit, t('Save configuration'));
    $this->drupalGet($alias);
    $this->assertLazyloaderEnabled(FALSE, 'Lazyloader disabled for disabled alias');

    $edit['lazyloader_paths'] = '*' . substr($alias, 2,2) . '*';
    $this->drupalPost("admin/config/media/lazyloader/exclude", $edit, t('Save configuration'));
    $this->drupalGet($alias);
    $this->assertLazyloaderEnabled(FALSE, 'Lazyloader disabled for disabled alias with wildcards');
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertLazyloaderEnabled(FALSE, 'Lazyloader is also disabled on internal path if alias with wildcard matches ');
  }
}
